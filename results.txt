
[0m[0m
[0m  Baseline tests - Array[0m
[0m    Baseline test - #indexOf()[0m
[2K[0G    [32m  âˆš[0m[90m should return -1 when the value is not present[0m
[2K[0G    [32m  âˆš[0m[90m should return index when the value is present[0m
[0m    Unit tests[0m
[2K[0G    [32m  âˆš[0m[90m Identity test[0m
[2K[0G    [31m  1) Circular JSON test[0m


[92m [0m[32m 3 passing[0m[90m (31ms)[0m
[31m  1 failing[0m

[0m  1) Baseline tests - Array Unit tests Circular JSON test:

      [31mAssertionError: expected Object {
  ai: Object {},
  api: EventEmitter {
    _events: Object { mount: Function { name: 'onmount' } },
    _router: Function {
      _params: Array [],
      caseSensitive: false,
      mergeParams: undefined,
      params: Object {},
      stack: Array [
        Layer {
          handle: Function { name: 'query' },
          keys: Array [],
          name: 'query',
          params: undefined,
          path: undefined,
          regexp: RegExp { /^\/?(?=\/|$)/i fast_slash: true },
          route: undefined
        },
        Layer {
          handle: Function { name: 'expressInit' },
          keys: Array [],
          name: 'expressInit',
          params: undefined,
          path: undefined,
          regexp: RegExp { /^\/?(?=\/|$)/i fast_slash: true },
          route: undefined
        },
        Layer {
          handle: Function { name: '' },
          keys: Array [],
          name: '<anonymous>',
          params: undefined,
          path: undefined,
          regexp: /^\/?$/i,
          route: Route {
            methods: Object { get: true },
            path: '/',
            stack: Array [
              Layer {
                handle: Function { name: '' },
                keys: Array [],
                method: 'get',
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                regexp: /^\/?$/i
              }
            ]
          }
        },
        Layer {
          handle: Function { name: '' },
          keys: Array [],
          name: '<anonymous>',
          params: undefined,
          path: undefined,
          regexp: /^\/test\/?$/i,
          route: Route {
            methods: Object { get: true },
            path: '/test',
            stack: Array [
              Layer {
                handle: Function { name: '' },
                keys: Array [],
                method: 'get',
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                regexp: /^\/?$/i
              }
            ]
          }
        },
        Layer {
          handle: Function { name: '' },
          keys: Array [],
          name: '<anonymous>',
          params: undefined,
          path: undefined,
          regexp: /^\/cloud\/?$/i,
          route: Route {
            methods: Object { get: true },
            path: '/cloud',
            stack: Array [
              Layer {
                handle: Function { name: '' },
                keys: Array [],
                method: 'get',
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                regexp: /^\/?$/i
              }
            ]
          }
        }
      ],
      strict: false,
      name: 'router'
    },
    addListener: Function { name: '' },
    all: Function { name: 'all' },
    cache: Object {},
    checkout: Function { name: '' },
    connect: Function { name: '' },
    copy: Function { name: '' },
    defaultConfiguration: Function { name: 'defaultConfiguration' },
    del: Function { name: '' },
    delete: Function { name: '' },
    disable: Function { name: 'disable' },
    disabled: Function { name: 'disabled' },
    emit: Function { name: '' },
    enable: Function { name: 'enable' },
    enabled: Function { name: 'enabled' },
    engine: Function { name: 'engine' },
    engines: Object {},
    get: Function { name: '' },
    handle: Function { name: 'handle' },
    head: Function { name: '' },
    init: Function { name: 'init' },
    lazyrouter: Function { name: 'lazyrouter' },
    listen: Function { name: 'listen' },
    listeners: Function { name: '' },
    locals: {
      settings: Object {
        env: 'development',
        etag: 'weak',
        'etag fn': Function { name: 'wetag' },
        'jsonp callback name': 'callback',
        'query parser': 'extended',
        'query parser fn': Function { name: 'parseExtendedQueryString' },
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': Function { name: 'trustNone' },
        view: Function { name: 'View' },
        views: 'c:\\git\\symbl\\views',
        'x-powered-by': true
      }
    },
    lock: Function { name: '' },
    'm-search': Function { name: '' },
    merge: Function { name: '' },
    mkactivity: Function { name: '' },
    mkcol: Function { name: '' },
    mountpath: '/',
    move: Function { name: '' },
    notify: Function { name: '' },
    on: Function { name: '' },
    once: Function { name: '' },
    options: Function { name: '' },
    param: Function { name: 'param' },
    patch: Function { name: '' },
    path: Function { name: 'path' },
    post: Function { name: '' },
    propfind: Function { name: '' },
    proppatch: Function { name: '' },
    purge: Function { name: '' },
    put: Function { name: '' },
    removeAllListeners: Function { name: '' },
    removeListener: Function { name: '' },
    render: Function { name: 'render' },
    report: Function { name: '' },
    request: IncomingMessage { app: [Circular] },
    response: ServerResponse { app: [Circular] },
    route: Function { name: 'route' },
    search: Function { name: '' },
    set: Function { name: 'set' },
    setMaxListeners: Function { name: '' },
    settings: Object {
      env: 'development',
      etag: 'weak',
      'etag fn': Function { name: 'wetag' },
      'jsonp callback name': 'callback',
      'query parser': 'extended',
      'query parser fn': Function { name: 'parseExtendedQueryString' },
      'subdomain offset': 2,
      'trust proxy': false,
      'trust proxy fn': Function { name: 'trustNone' },
      view: Function { name: 'View' },
      views: 'c:\\git\\symbl\\views',
      'x-powered-by': true
    },
    subscribe: Function { name: '' },
    trace: Function { name: '' },
    unlock: Function { name: '' },
    unsubscribe: Function { name: '' },
    use: Function { name: 'use' },
    name: ''
  },
  bootstrap: Object {},
  cli: Command {
    Command: Function { name: 'Command' },
    Option: Function { name: 'Option' },
    _allowUnknownOption: false,
    _args: Array [],
    _events: Object {
      '': Function { name: '' },
      '*': Function { name: '' },
      '-Test': Function { name: '' },
      service: Function { name: '' },
      setup: Function { name: '' },
      teardown: Function { name: '' },
      test: Function { name: '' },
      version: Array [ Function { name: '' }, Function { name: '' } ]
    },
    _execs: Object {},
    _name: 'grunt',
    _version: '0.0.1',
    args: Array [],
    commands: Array [
      Command {
        _allowUnknownOption: false,
        _args: Array [],
        _description: '',
        _execs: Object {},
        _name: '',
        _noHelp: false,
        commands: Array [],
        options: Array [],
        parent: [Circular]
      },
      Command {
        _allowUnknownOption: false,
        _args: Array [],
        _description: 'run test commands',
        _execs: Object {},
        _name: 'test',
        _noHelp: false,
        commands: Array [],
        options: Array [],
        parent: [Circular]
      },
      Command {
        _allowUnknownOption: false,
        _args: Array [],
        _description: 'run setup commands',
        _execs: Object {},
        _name: 'setup',
        _noHelp: false,
        commands: Array [],
        options: Array [],
        parent: [Circular]
      },
      Command {
        _allowUnknownOption: false,
        _args: Array [ Object { name: 'port', required: true, variadic: false } ],
        _description: 'run as a service on <port>',
        _execs: Object {},
        _name: 'service',
        _noHelp: false,
        commands: Array [],
        options: Array [],
        parent: [Circular]
      },
      Command {
        _allowUnknownOption: false,
        _args: Array [
          Object { name: 'dir', required: true, variadic: false },
          Object { name: 'otherDirs', required: false, variadic: true }
        ],
        _description: 'run teardown commands',
        _execs: Object {},
        _name: 'teardown',
        _noHelp: false,
        commands: Array [],
        options: Array [],
        parent: [Circular]
      },
      Command {
        _allowUnknownOption: false,
        _args: Array [],
        _description: 'deploy the given env',
        _execs: Object {},
        _name: '*',
        _noHelp: false,
        commands: Array [],
        options: Array [],
        parent: [Circular]
      }
    ],
    options: Array [
      Option {
        bool: true,
        description: 'output the version number',
        flags: '-V, --version',
        long: '--version',
        optional: 0,
        required: 0,
        short: '-V'
      },
      Option {
        bool: true,
        description: 'Execute tests.',
        flags: '-T, -Test',
        long: '-Test',
        optional: 0,
        required: 0,
        short: '-T'
      }
    ],
    rawArgs: Array [
      'node',
      'C:\\Users\\Evan\\AppData\\Roaming\\npm\\node_modules\\grunt-cli\\bin\\grunt'
    ]
  },
  cloud: Object {},
  graph: Object {},
  lambda: Function {
    Promise: Function {
      all: Function { name: 'all' },
      race: Function { name: 'race' },
      reject: Function { name: 'reject' },
      resolve: [Circular],
      name: 'promise'
    },
    all: Function { name: 'all' },
    allResolved: Function { name: '' },
    allSettled: Function { name: 'allSettled' },
    any: Function { name: 'any' },
    async: Function { name: 'async' },
    catch: Function { name: '' },
    defer: Function { name: 'defer' },
    del: Function { name: '' },
    delay: Function { name: '' },
    delete: Function { name: '' },
    denodeify: Function { name: '' },
    dispatch: Function { name: 'dispatch' },
    done: Function { name: '' },
    fail: Function { name: '' },
    fapply: Function { name: '' },
    fbind: Function { name: '' },
    fcall: Function { name: '' },
    fin: Function { name: '' },
    finally: Function { name: '' },
    fulfill: Function { name: 'fulfill' },
    get: Function { name: '' },
    getUnhandledReasons: Function { name: '' },
    invoke: Function { name: '' },
    isFulfilled: Function { name: 'isFulfilled' },
    isPending: Function { name: 'isPending' },
    isPromise: Function { name: 'isPromise' },
    isPromiseAlike: Function { name: 'isPromiseAlike' },
    isRejected: Function { name: 'isRejected' },
    join: Function { name: '' },
    keys: Function { name: '' },
    longStackSupport: false,
    makePromise: Function { name: 'Promise' },
    mapply: Function { name: '' },
    master: Function { name: 'master' },
    mcall: Function { name: '' },
    nbind: Function { name: '' },
    nearer: Function { name: 'nearer' },
    nextTick: Function { runAfter: Function { name: '' }, name: '' },
    nfapply: Function { name: '' },
    nfbind: Function { name: '' },
    nfcall: Function { name: '' },
    ninvoke: Function { name: '' },
    nmapply: Function { name: '' },
    nmcall: Function { name: '' },
    noConflict: Function { name: '' },
    nodeify: Function { name: 'nodeify' },
    npost: Function { name: '' },
    nsend: Function { name: '' },
    passByCopy: Function { name: '' },
    post: Function { name: '' },
    progress: Function { name: 'progress' },
    promise: Function {
      all: Function { name: 'all' },
      race: Function { name: 'race' },
      reject: Function { name: 'reject' },
      resolve: [Circular],
      name: 'promise'
    },
    promised: Function { name: 'promised' },
    race: Function { name: 'race' },
    reject: Function { name: 'reject' },
    resetUnhandledRejections: Function { name: 'resetUnhandledRejections' },
    resolve: [Circular],
    return: Function { name: '_return' },
    send: Function { name: '' },
    set: Function { name: '' },
    spawn: Function { name: 'spawn' },
    spread: Function { name: 'spread' },
    stopUnhandledRejectionTracking: Function { name: '' },
    tap: Function { name: '' },
    thenReject: Function { name: '' },
    thenResolve: Function { name: '' },
    timeout: Function { name: '' },
    try: Function { name: '' },
    when: Function { name: 'when' },
    name: 'Q'
  },
  log: Object {
    debug: Function { name: '' },
    error: Function { name: '' },
    info: Function { name: '' },
    warn: Function { name: '' }
  },
  test: Object {
    benchmark: Suite {
      '0': Benchmark {
        async: false,
        defer: false,
        delay: 0.005,
        fn: Function { name: '' },
        id: 1,
        initCount: 1,
        maxTime: 5,
        minSamples: 5,
        minTime: 0,
        name: 'RegExp#test',
        options: Object {
          async: false,
          defer: false,
          delay: 0.005,
          id: undefined,
          initCount: 1,
          maxTime: 5,
          minSamples: 5,
          minTime: 0,
          name: undefined,
          onAbort: undefined,
          onComplete: undefined,
          onCycle: undefined,
          onError: undefined,
          onReset: undefined,
          onStart: undefined
        },
        stats: Object {
          deviation: 0,
          mean: 0,
          moe: 0,
          rme: 0,
          sample: Array [],
          sem: 0,
          variance: 0
        },
        times: Object { cycle: 0, elapsed: 0, period: 0, timeStamp: 0 }
      },
      '1': Benchmark {
        async: false,
        defer: false,
        delay: 0.005,
        fn: Function { name: '' },
        id: 2,
        initCount: 1,
        maxTime: 5,
        minSamples: 5,
        minTime: 0,
        name: 'String#indexOf',
        options: Object {
          async: false,
          defer: false,
          delay: 0.005,
          id: undefined,
          initCount: 1,
          maxTime: 5,
          minSamples: 5,
          minTime: 0,
          name: undefined,
          onAbort: undefined,
          onComplete: undefined,
          onCycle: undefined,
          onError: undefined,
          onReset: undefined,
          onStart: undefined
        },
        stats: Object {
          deviation: 0,
          mean: 0,
          moe: 0,
          rme: 0,
          sample: Array [],
          sem: 0,
          variance: 0
        },
        times: Object { cycle: 0, elapsed: 0, period: 0, timeStamp: 0 }
      },
      events: Object {
        complete: Array [ Function { name: '' } ],
        cycle: Array [ Function { name: '' } ]
      },
      length: 2,
      name: undefined,
      options: Object { name: undefined }
    },
    integration: Object {},
    run: Function { name: '' },
    unit: Object {}
  }
} == Object {
  ai: Object {},
  bootstrap: Object {},
  cli: Object {
    _allowUnknownOption: false,
    _args: Array [],
    _events: Object { version: Array [ null, null ] },
    _execs: Object {},
    _name: 'grunt',
    _version: '0.0.1',
    args: Array [],
    commands: Array [
      Object {
        _allowUnknownOption: false,
        _args: Array [],
        _description: '',
        _execs: Object {},
        _name: '',
        _noHelp: false,
        commands: Array [],
        options: Array [],
        parent: [Circular]
      },
      Object {
        _allowUnknownOption: false,
        _args: Array [],
        _description: 'run test commands',
        _execs: Object {},
        _name: 'test',
        _noHelp: false,
        commands: Array [],
        options: Array [],
        parent: [Circular]
      },
      Object {
        _allowUnknownOption: false,
        _args: Array [],
        _description: 'run setup commands',
        _execs: Object {},
        _name: 'setup',
        _noHelp: false,
        commands: Array [],
        options: Array [],
        parent: [Circular]
      },
      Object {
        _allowUnknownOption: false,
        _args: Array [ Object { name: 'port', required: true, variadic: false } ],
        _description: 'run as a service on <port>',
        _execs: Object {},
        _name: 'service',
        _noHelp: false,
        commands: Array [],
        options: Array [],
        parent: [Circular]
      },
      Object {
        _allowUnknownOption: false,
        _args: Array [
          Object { name: 'dir', required: true, variadic: false },
          Object { name: 'otherDirs', required: false, variadic: true }
        ],
        _description: 'run teardown commands',
        _execs: Object {},
        _name: 'teardown',
        _noHelp: false,
        commands: Array [],
        options: Array [],
        parent: [Circular]
      },
      Object {
        _allowUnknownOption: false,
        _args: Array [],
        _description: 'deploy the given env',
        _execs: Object {},
        _name: '*',
        _noHelp: false,
        commands: Array [],
        options: Array [],
        parent: [Circular]
      }
    ],
    options: Array [
      Object {
        bool: true,
        description: 'output the version number',
        flags: '-V, --version',
        long: '--version',
        optional: 0,
        required: 0,
        short: '-V'
      },
      Object {
        bool: true,
        description: 'Execute tests.',
        flags: '-T, -Test',
        long: '-Test',
        optional: 0,
        required: 0,
        short: '-T'
      }
    ],
    rawArgs: Array [
      'node',
      'C:\\Users\\Evan\\AppData\\Roaming\\npm\\node_modules\\grunt-cli\\bin\\grunt'
    ]
  },
  cloud: Object {},
  graph: Object {},
  log: Object {},
  test: Object {
    benchmark: Object {
      '0': Object {
        async: false,
        defer: false,
        delay: 0.005,
        id: 1,
        initCount: 1,
        maxTime: 5,
        minSamples: 5,
        minTime: 0,
        name: 'RegExp#test',
        options: Object {
          async: false,
          defer: false,
          delay: 0.005,
          id: null,
          initCount: 1,
          maxTime: 5,
          minSamples: 5,
          minTime: 0,
          name: null,
          onAbort: null,
          onComplete: null,
          onCycle: null,
          onError: null,
          onReset: null,
          onStart: null
        },
        stats: Object {
          deviation: 0,
          mean: 0,
          moe: 0,
          rme: 0,
          sample: Array [],
          sem: 0,
          variance: 0
        },
        times: Object { cycle: 0, elapsed: 0, period: 0, timeStamp: 0 }
      },
      '1': Object {
        async: false,
        defer: false,
        delay: 0.005,
        id: 2,
        initCount: 1,
        maxTime: 5,
        minSamples: 5,
        minTime: 0,
        name: 'String#indexOf',
        options: Object {
          async: false,
          defer: false,
          delay: 0.005,
          id: null,
          initCount: 1,
          maxTime: 5,
          minSamples: 5,
          minTime: 0,
          name: null,
          onAbort: null,
          onComplete: null,
          onCycle: null,
          onError: null,
          onReset: null,
          onStart: null
        },
        stats: Object {
          deviation: 0,
          mean: 0,
          moe: 0,
          rme: 0,
          sample: Array [],
          sem: 0,
          variance: 0
        },
        times: Object { cycle: 0, elapsed: 0, period: 0, timeStamp: 0 }
      },
      events: Object { complete: Array [ null ], cycle: Array [ null ] },
      length: 2,
      name: null,
      options: Object { name: null }
    },
    integration: Object {},
    unit: Object {}
  }
}[0m
      [32m+ expected[0m [31m- actual[0m

       {
         "ai": {}
      [31m-  "api": {[0m
      [31m-    "_events": {[0m
      [31m-      "mount": [Function][0m
      [31m-    }[0m
      [31m-    "_router": {[0m
      [31m-      "_params": [][0m
      [31m-      "caseSensitive": false[0m
      [31m-      "mergeParams": [undefined][0m
      [31m-      "params": {}[0m
      [31m-      "stack": [[0m
      [31m-        {[0m
      [31m-          "handle": [Function][0m
      [31m-          "keys": [][0m
      [31m-          "name": "query"[0m
      [31m-          "params": [undefined][0m
      [31m-          "path": [undefined][0m
      [31m-          "regexp": /^\/?(?=\/|$)/i[0m
      [31m-          "route": [undefined][0m
      [31m-        }[0m
      [31m-        {[0m
      [31m-          "handle": [Function][0m
      [31m-          "keys": [][0m
      [31m-          "name": "expressInit"[0m
      [31m-          "params": [undefined][0m
      [31m-          "path": [undefined][0m
      [31m-          "regexp": /^\/?(?=\/|$)/i[0m
      [31m-          "route": [undefined][0m
      [31m-        }[0m
      [31m-        {[0m
      [31m-          "handle": [Function][0m
      [31m-          "keys": [][0m
      [31m-          "name": "<anonymous>"[0m
      [31m-          "params": [undefined][0m
      [31m-          "path": [undefined][0m
      [31m-          "regexp": /^\/?$/i[0m
      [31m-          "route": {[0m
      [31m-            "methods": {[0m
      [31m-              "get": true[0m
      [31m-            }[0m
      [31m-            "path": "/"[0m
      [31m-            "stack": [[0m
      [31m-              {[0m
      [31m-                "handle": [Function][0m
      [31m-                "keys": [][0m
      [31m-                "method": "get"[0m
      [31m-                "name": "<anonymous>"[0m
      [31m-                "params": [undefined][0m
      [31m-                "path": [undefined][0m
      [31m-                "regexp": /^\/?$/i[0m
      [31m-              }[0m
      [31m-            ][0m
      [31m-          }[0m
      [31m-        }[0m
      [31m-        {[0m
      [31m-          "handle": [Function][0m
      [31m-          "keys": [][0m
      [31m-          "name": "<anonymous>"[0m
      [31m-          "params": [undefined][0m
      [31m-          "path": [undefined][0m
      [31m-          "regexp": /^\/test\/?$/i[0m
      [31m-          "route": {[0m
      [31m-            "methods": {[0m
      [31m-              "get": true[0m
      [31m-            }[0m
      [31m-            "path": "/test"[0m
      [31m-            "stack": [[0m
      [31m-              {[0m
      [31m-                "handle": [Function][0m
      [31m-                "keys": [][0m
      [31m-                "method": "get"[0m
      [31m-                "name": "<anonymous>"[0m
      [31m-                "params": [undefined][0m
      [31m-                "path": [undefined][0m
      [31m-                "regexp": /^\/?$/i[0m
      [31m-              }[0m
      [31m-            ][0m
      [31m-          }[0m
      [31m-        }[0m
      [31m-        {[0m
      [31m-          "handle": [Function][0m
      [31m-          "keys": [][0m
      [31m-          "name": "<anonymous>"[0m
      [31m-          "params": [undefined][0m
      [31m-          "path": [undefined][0m
      [31m-          "regexp": /^\/cloud\/?$/i[0m
      [31m-          "route": {[0m
      [31m-            "methods": {[0m
      [31m-              "get": true[0m
      [31m-            }[0m
      [31m-            "path": "/cloud"[0m
      [31m-            "stack": [[0m
      [31m-              {[0m
      [31m-                "handle": [Function][0m
      [31m-                "keys": [][0m
      [31m-                "method": "get"[0m
      [31m-                "name": "<anonymous>"[0m
      [31m-                "params": [undefined][0m
      [31m-                "path": [undefined][0m
      [31m-                "regexp": /^\/?$/i[0m
      [31m-              }[0m
      [31m-            ][0m
      [31m-          }[0m
      [31m-        }[0m
      [31m-      ][0m
      [31m-      "strict": false[0m
      [31m-    }[0m
      [31m-    "addListener": [Function][0m
      [31m-    "all": [Function][0m
      [31m-    "cache": {}[0m
      [31m-    "checkout": [Function][0m
      [31m-    "connect": [Function][0m
      [31m-    "copy": [Function][0m
      [31m-    "defaultConfiguration": [Function][0m
      [31m-    "del": [Function][0m
      [31m-    "delete": [Function][0m
      [31m-    "disable": [Function][0m
      [31m-    "disabled": [Function][0m
      [31m-    "emit": [Function][0m
      [31m-    "enable": [Function][0m
      [31m-    "enabled": [Function][0m
      [31m-    "engine": [Function][0m
      [31m-    "engines": {}[0m
      [31m-    "get": [Function][0m
      [31m-    "handle": [Function][0m
      [31m-    "head": [Function][0m
      [31m-    "init": [Function][0m
      [31m-    "lazyrouter": [Function][0m
      [31m-    "listen": [Function][0m
      [31m-    "listeners": [Function][0m
      [31m-    "locals": {[0m
      [31m-      "settings": {[0m
      [31m-        "env": "development"[0m
      [31m-        "etag": "weak"[0m
      [31m-        "etag fn": [Function][0m
      [31m-        "jsonp callback name": "callback"[0m
      [31m-        "query parser": "extended"[0m
      [31m-        "query parser fn": [Function][0m
      [31m-        "subdomain offset": 2[0m
      [31m-        "trust proxy": false[0m
      [31m-        "trust proxy fn": [Function][0m
      [31m-        "view": [Function][0m
      [31m-        "views": "c:\\git\\symbl\\views"[0m
      [31m-        "x-powered-by": true[0m
      [31m-      }[0m
      [31m-    }[0m
      [31m-    "lock": [Function][0m
      [31m-    "m-search": [Function][0m
      [31m-    "merge": [Function][0m
      [31m-    "mkactivity": [Function][0m
      [31m-    "mkcol": [Function][0m
      [31m-    "mountpath": "/"[0m
      [31m-    "move": [Function][0m
      [31m-    "notify": [Function][0m
      [31m-    "on": [Function][0m
      [31m-    "once": [Function][0m
      [31m-    "options": [Function][0m
      [31m-    "param": [Function][0m
      [31m-    "patch": [Function][0m
      [31m-    "path": [Function][0m
      [31m-    "post": [Function][0m
      [31m-    "propfind": [Function][0m
      [31m-    "proppatch": [Function][0m
      [31m-    "purge": [Function][0m
      [31m-    "put": [Function][0m
      [31m-    "removeAllListeners": [Function][0m
      [31m-    "removeListener": [Function][0m
      [31m-    "render": [Function][0m
      [31m-    "report": [Function][0m
      [31m-    "request": {[0m
      [31m-      "app": [Circular][0m
      [31m-    }[0m
      [31m-    "response": {[0m
      [31m-      "app": [Circular][0m
      [31m-    }[0m
      [31m-    "route": [Function][0m
      [31m-    "search": [Function][0m
      [31m-    "set": [Function][0m
      [31m-    "setMaxListeners": [Function][0m
      [31m-    "settings": {[0m
      [31m-      "env": "development"[0m
      [31m-      "etag": "weak"[0m
      [31m-      "etag fn": [Function][0m
      [31m-      "jsonp callback name": "callback"[0m
      [31m-      "query parser": "extended"[0m
      [31m-      "query parser fn": [Function][0m
      [31m-      "subdomain offset": 2[0m
      [31m-      "trust proxy": false[0m
      [31m-      "trust proxy fn": [Function][0m
      [31m-      "view": [Function][0m
      [31m-      "views": "c:\\git\\symbl\\views"[0m
      [31m-      "x-powered-by": true[0m
      [31m-    }[0m
      [31m-    "subscribe": [Function][0m
      [31m-    "trace": [Function][0m
      [31m-    "unlock": [Function][0m
      [31m-    "unsubscribe": [Function][0m
      [31m-    "use": [Function][0m
      [31m-  }[0m
         "bootstrap": {}
         "cli": {
      [31m-    "Command": [Function][0m
      [31m-    "Option": [Function][0m
           "_allowUnknownOption": false
           "_args": []
           "_events": {
      [31m-      "": [Function][0m
      [31m-      "*": [Function][0m
      [31m-      "-Test": [Function][0m
      [31m-      "service": [Function][0m
      [31m-      "setup": [Function][0m
      [31m-      "teardown": [Function][0m
      [31m-      "test": [Function][0m
             "version": [
      [31m-        [Function][0m
      [31m-        [Function][0m
      [32m+        [null][0m
      [32m+        [null][0m
             ]
           }
           "_execs": {}
           "_name": "grunt"
           ]
         }
         "cloud": {}
         "graph": {}
      [31m-  "lambda": {[0m
      [31m-    "Promise": {[0m
      [31m-      "all": [Function][0m
      [31m-      "race": [Function][0m
      [31m-      "reject": [Function][0m
      [31m-      "resolve": [Circular][0m
      [31m-    }[0m
      [31m-    "all": [Function][0m
      [31m-    "allResolved": [Function][0m
      [31m-    "allSettled": [Function][0m
      [31m-    "any": [Function][0m
      [31m-    "async": [Function][0m
      [31m-    "catch": [Function][0m
      [31m-    "defer": [Function][0m
      [31m-    "del": [Function][0m
      [31m-    "delay": [Function][0m
      [31m-    "delete": [Function][0m
      [31m-    "denodeify": [Function][0m
      [31m-    "dispatch": [Function][0m
      [31m-    "done": [Function][0m
      [31m-    "fail": [Function][0m
      [31m-    "fapply": [Function][0m
      [31m-    "fbind": [Function][0m
      [31m-    "fcall": [Function][0m
      [31m-    "fin": [Function][0m
      [31m-    "finally": [Function][0m
      [31m-    "fulfill": [Function][0m
      [31m-    "get": [Function][0m
      [31m-    "getUnhandledReasons": [Function][0m
      [31m-    "invoke": [Function][0m
      [31m-    "isFulfilled": [Function][0m
      [31m-    "isPending": [Function][0m
      [31m-    "isPromise": [Function][0m
      [31m-    "isPromiseAlike": [Function][0m
      [31m-    "isRejected": [Function][0m
      [31m-    "join": [Function][0m
      [31m-    "keys": [Function][0m
      [31m-    "longStackSupport": false[0m
      [31m-    "makePromise": [Function][0m
      [31m-    "mapply": [Function][0m
      [31m-    "master": [Function][0m
      [31m-    "mcall": [Function][0m
      [31m-    "nbind": [Function][0m
      [31m-    "nearer": [Function][0m
      [31m-    "nextTick": {[0m
      [31m-      "runAfter": [Function][0m
      [31m-    }[0m
      [31m-    "nfapply": [Function][0m
      [31m-    "nfbind": [Function][0m
      [31m-    "nfcall": [Function][0m
      [31m-    "ninvoke": [Function][0m
      [31m-    "nmapply": [Function][0m
      [31m-    "nmcall": [Function][0m
      [31m-    "noConflict": [Function][0m
      [31m-    "nodeify": [Function][0m
      [31m-    "npost": [Function][0m
      [31m-    "nsend": [Function][0m
      [31m-    "passByCopy": [Function][0m
      [31m-    "post": [Function][0m
      [31m-    "progress": [Function][0m
      [31m-    "promise": {[0m
      [31m-      "all": [Function][0m
      [31m-      "race": [Function][0m
      [31m-      "reject": [Function][0m
      [31m-      "resolve": [Circular][0m
      [31m-    }[0m
      [31m-    "promised": [Function][0m
      [31m-    "race": [Function][0m
      [31m-    "reject": [Function][0m
      [31m-    "resetUnhandledRejections": [Function][0m
      [31m-    "resolve": [Circular][0m
      [31m-    "return": [Function][0m
      [31m-    "send": [Function][0m
      [31m-    "set": [Function][0m
      [31m-    "spawn": [Function][0m
      [31m-    "spread": [Function][0m
      [31m-    "stopUnhandledRejectionTracking": [Function][0m
      [31m-    "tap": [Function][0m
      [31m-    "thenReject": [Function][0m
      [31m-    "thenResolve": [Function][0m
      [31m-    "timeout": [Function][0m
      [31m-    "try": [Function][0m
      [31m-    "when": [Function][0m
      [31m-  }[0m
      [31m-  "log": {[0m
      [31m-    "debug": [Function][0m
      [31m-    "error": [Function][0m
      [31m-    "info": [Function][0m
      [31m-    "warn": [Function][0m
      [31m-  }[0m
      [32m+  "log": {}[0m
         "test": {
           "benchmark": {
             "0": {
               "async": false
               "defer": false
               "delay": 0.005
      [31m-        "fn": [Function][0m
               "id": 1
               "initCount": 1
               "maxTime": 5
               "minSamples": 5
               "options": {
                 "async": false
                 "defer": false
                 "delay": 0.005
      [31m-          "id": [undefined][0m
      [32m+          "id": [null][0m
                 "initCount": 1
                 "maxTime": 5
                 "minSamples": 5
                 "minTime": 0
      [31m-          "name": [undefined][0m
      [31m-          "onAbort": [undefined][0m
      [31m-          "onComplete": [undefined][0m
      [31m-          "onCycle": [undefined][0m
      [31m-          "onError": [undefined][0m
      [31m-          "onReset": [undefined][0m
      [31m-          "onStart": [undefined][0m
      [32m+          "name": [null][0m
      [32m+          "onAbort": [null][0m
      [32m+          "onComplete": [null][0m
      [32m+          "onCycle": [null][0m
      [32m+          "onError": [null][0m
      [32m+          "onReset": [null][0m
      [32m+          "onStart": [null][0m
               }
               "stats": {
                 "deviation": 0
                 "mean": 0
             "1": {
               "async": false
               "defer": false
               "delay": 0.005
      [31m-        "fn": [Function][0m
               "id": 2
               "initCount": 1
               "maxTime": 5
               "minSamples": 5
               "options": {
                 "async": false
                 "defer": false
                 "delay": 0.005
      [31m-          "id": [undefined][0m
      [32m+          "id": [null][0m
                 "initCount": 1
                 "maxTime": 5
                 "minSamples": 5
                 "minTime": 0
      [31m-          "name": [undefined][0m
      [31m-          "onAbort": [undefined][0m
      [31m-          "onComplete": [undefined][0m
      [31m-          "onCycle": [undefined][0m
      [31m-          "onError": [undefined][0m
      [31m-          "onReset": [undefined][0m
      [31m-          "onStart": [undefined][0m
      [32m+          "name": [null][0m
      [32m+          "onAbort": [null][0m
      [32m+          "onComplete": [null][0m
      [32m+          "onCycle": [null][0m
      [32m+          "onError": [null][0m
      [32m+          "onReset": [null][0m
      [32m+          "onStart": [null][0m
               }
               "stats": {
                 "deviation": 0
                 "mean": 0
               }
             }
             "events": {
               "complete": [
      [31m-          [Function][0m
      [32m+          [null][0m
               ]
               "cycle": [
      [31m-          [Function][0m
      [32m+          [null][0m
               ]
             }
             "length": 2
      [31m-      "name": [undefined][0m
      [32m+      "name": [null][0m
             "options": {
      [31m-        "name": [undefined][0m
      [32m+        "name": [null][0m
             }
           }
           "integration": {}
      [31m-    "run": [Function][0m
           "unit": {}
         }
       }
      [0m[90m
      at Context.<anonymous> (c:\git\symbl\test\symbl.js:28:10)
      at callFn (c:\git\symbl\node_modules\mocha\lib\runnable.js:286:21)
      at Test.Runnable.run (c:\git\symbl\node_modules\mocha\lib\runnable.js:279:7)
      at Runner.runTest (c:\git\symbl\node_modules\mocha\lib\runner.js:421:10)
      at c:\git\symbl\node_modules\mocha\lib\runner.js:528:12
      at next (c:\git\symbl\node_modules\mocha\lib\runner.js:341:14)
      at c:\git\symbl\node_modules\mocha\lib\runner.js:351:7
      at next (c:\git\symbl\node_modules\mocha\lib\runner.js:283:14)
      at Object._onImmediate (c:\git\symbl\node_modules\mocha\lib\runner.js:319:5)
[0m


